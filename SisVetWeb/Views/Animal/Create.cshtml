@using System.Collections
@using System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder
@using System.Web.UI.WebControls
@model Domain.Entidades.Cadastro.Animal

@{
    ViewBag.Title = "Create";
}

<link href="~/Content/combobox.css" rel="stylesheet" />
<link href="~/Content/form-bootstrap-override.css" rel="stylesheet" />
<h2>Cadastro Animal</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="container  col-sm-10 col-md-9">

        <hr />
        @Html.ValidationSummary(true)

        <div class="form-group row">
            <label class="col-sm-4 col-md-3 col-lg-2">Nome</label>
            <div class="input-group col-sm-8 col-md-9 col-lg-10">
                <span class="input-group-addon">
                    <i class="fa fa-paw"></i>
                </span>
                @Html.TextBoxFor(model => model.Nome, new { @class = "form-control", id = "input", placeholder = "Nome do animal" })
            </div>
        </div>

        <div class="form-group row">
            <label class="col-sm-4 col-md-3 col-lg-2">Pelagem</label>
            <div class="input-group col-sm-8 col-md-9 col-lg-10">
                <span class="input-group-addon">
                    <i class="fa fa-fire"></i>
                </span>
                @Html.TextBoxFor(model => model.Pelagem, new { @class = "form-control", id = "input", placeholder = "pelagem" })
            </div>
        </div>

        <div class="form-group row">
            <label class="control-label col-sm-4 col-md-3 col-lg-2">Data Nascimento</label>
            <div class="input-group col-sm-8 col-md-9 col-lg-10">
                <span class="input-group-addon">
                    <i class="fa fa-calendar"></i>
                </span>
                <input class="form-control" data-val="true" data-val-date="Formato incorreto no campo Data de Nascimento." data-val-required="O campo Data de Nascimento é obrigatório." id="DataNascimento" name="DataNascimento" type="date" onblur="calculaIdade()">
            </div>
        </div>

        <div class="form-group row">
            <label class="control-label col-sm-4 col-md-3 col-lg-2">Idade</label>
            <div class="input-group col-sm-8 col-md-9 col-lg-10">
                <span class="input-group-addon">
                    <i class="fa fa-calendar"></i>
                </span>
                @Html.TextBox("idade", "", new { @class = "form-control", @id = "idade", disabled = "disabled" })
            </div>
        </div>

        <div class="form-group row">
            <label class="control-label col-sm-4 col-md-3 col-lg-2">Raça</label>
            <div class="input-group col-sm-8 col-md-9 col-lg-10">
                <span class="input-group-addon">
                    <i class="fa fa-paw"></i>
                </span>
                @Html.DropDownList("RacaID", (IEnumerable<SelectListItem>)ViewBag.RacaID, "Selecione...", new { @class = "form-control combobox", required = "true", title = "Este campo é obrigatório!" })
            </div>

        </div>

        <div class="form-group row">
            <label class="control-label col-sm-4 col-md-3 col-lg-2">Proprietário</label>
            <div class="input-group col-sm-8 col-md-9 col-lg-10">
                <span class="input-group-addon">
                    <i class="fa fa-user"></i>
                </span>
                @Html.DropDownList("ClienteId", (IEnumerable<SelectListItem>)ViewBag.ClienteID, "Selecione...", new { @class = "form-control combobox" })
            </div>
        </div>


        <div class="form-group row">
            <label class="control-label col-sm-4 col-md-3 col-lg-2">Sexo</label>
            <div class="input-group col-sm-8 col-md-9 col-lg-10">
                <span class="input-group-addon">
                    <i class="fa fa-venus-mars"></i>
                </span>
                @Html.DropDownListFor(model => model.Sexo,
                new List<SelectListItem>{
                    new SelectListItem{Text = "Macho",Value = "M",Selected = true},
                    new SelectListItem{Text = "Fêmea",Value="F"},

                }, new { @class = "form-control" })
            </div>
        </div>

        <div class="form-group row">
            <label class="control-label col-sm-4 col-md-3 col-lg-2">Castrado</label>
            <div class="input-group col-sm-8 col-md-9 col-lg-10">
                @Html.EditorFor(model => model.Castrado, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Castrado)
            </div>
        </div>


        <div class="form-group row">
            <label class="control-label col-sm-4 col-md-3 col-lg-2">Óbito</label>
            <div class="input-group col-sm-8 col-md-9 col-lg-10">
                @Html.EditorFor(model => model.Obito, new { @class = "form-control", style = " height:150px;" })
                @Html.ValidationMessageFor(model => model.Obito)
            </div>
        </div>

        <div class="form-group row">
            <label class="control-label col-sm-4 col-md-3 col-lg-2">Observação</label>
            <div class="input-group col-sm-8 col-md-9 col-lg-10">
                <span class="input-group-addon">
                    <i class="fa fa-keyboard-o"></i>
                </span>
                @Html.TextAreaFor(model => model.Observacao, new { @class = "form-control", style = "width: 500px; max-width: 500px; height: 300px; max-height:500px ", id = "observacao", placeholder = "Pressione F2 para inserir a data atual", spellcheck = "false" })
                @Html.ValidationMessageFor(model => model.Observacao)
            </div>
        </div>

        <button type="submit" class="btn btn-success col-sm-2 col-md-2">
            Salvar
            <i class="fa fa-paper-plane"></i>
        </button>
    </div>
}

@section Scripts {
    <script src="~/Scripts/jquery.combobox.js"></script>
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/utilsMath")
    <script type="text/javascript">
        (function () {
            $.validator.methods.date = function (value, element) {
                return this.optional(element) || Globalize.parseDate(value, 'dd/MM/yyyy') !== null;
            }
        })();
    </script>
}
